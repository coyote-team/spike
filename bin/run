#!/usr/bin/env ruby

require 'date'
require 'json'
require 'pathname'
require 'pp'
require 'uri'

require 'bundler/setup'
require 'active_support/core_ext/string/inflections'
require 'active_support/core_ext/object/blank'
require 'active_support/core_ext/hash/except'
require 'google/cloud/translate'


ROOT_PATH = Pathname(__dir__).parent
DATA_PATH = ROOT_PATH.join('data').join('coyote_images.json')
OUTPUT_PATH = ROOT_PATH.join('docs').tap(&:mkpath)

APPROVED = 'Approved'.freeze
TEXT_CONTENT_TYPE = 'text/plain'.freeze

BASE_URI = Pathname('http://coyote.data')

LANGUAGES = %w(zh-CN zh-TW).freeze

VOICES = {
  "en" => 'Samantha',
  "es" => 'Paulina',
  'zh-CN' => 'Ting-Ting',
  'zh-TW' => 'Ting-Ting'
}

# next step is make a hypermedia JSON version that has language translation and audio transcription
# be sure to link to siblings

# /empire_state_building/ gives you basic attributes and relationships to collections; stuff like source URI would be an attribute
# /empire_state_building/relationships/representations would let you add stuff to the representations
# /empire_state_building/representations/123 would be a particular JSON representation of ESB
# /empire_state_building/representations/123.en.html
# /empire_state_building/representations/123.en.text
# /empire_state_building/representations/123.es.html
# /empire_state_building/representations/123.es.html

# Each representation and each resource would represent predicates as collections also, thus:
# /empire_state_building/hasParts/ would return a collection of items that are part of ESB
# /empire_state_building/relationships/hasParts would let you manipulate the parts
# /empire_state_building/isPartOf/
# /empire_state_building/representations/123/isFormatOf
# /empire_state_building/representations/123/isVersionOf
# /picture_of_empire_state_building/representations/123/isFormatOf

HAS_PART = ['hasPart'.freeze,'isPartOf'.freeze].freeze
HAS_FORMAT = ['hasFormat'.freeze,'isFormatOf'.freeze].freeze
IS_FORMAT = HAS_FORMAT.reverse
IS_VERSION = ['isVersionOf'.freeze,'hasVersion'.freeze].freeze

class Predicate < Struct.new(:identifier,:subject,:verb,:object)
  def attributes
    { subject: subject.uri,
      verb: verb,
      object: object.uri }
  end

  def uri
    BASE_URI.join('predicates',identifier.to_s)
  end
end

class Resource < Struct.new(:identifier,:type,:canonical_id,:source_uri,:title,:context,:created_at,:updated_at,:representations,:links)
  def initialize(rec)
    self.title = rec[:title].presence || identifier.humanize
    self.type = rec.fetch(:type,'Image')
    self.source_uri = rec.fetch(:source_uri)
    self.identifier = rec[:identifier].presence || URI(source_uri).path.split(%r{/}).last.to_s
    self.canonical_id = rec.fetch(:canonical_id)
    self.context = rec.fetch(:context)
    self.created_at = rec.fetch(:created_at)
    self.updated_at = rec.fetch(:updated_at)
    self.representations = []
    self.links = []
  end

  def attributes
    { title: title, type: type, source_uri: source_uri, canonical_id: canonical_id, context: context, created_at: created_at, updated_at: updated_at }
  end

  def uri
    BASE_URI.join(identifier)
  end

  def <<(representation)
    representations << representation
  end
  
  def link(identifier,verb,resource)
    links << Predicate.new(identifier,self,verb,resource)
  end
end

class Representation < Struct.new(:identifier,:text,:metum,:status,:author,:license,:content_type,:language,:content_uri,:links)
  def initialize(rec)
    self.identifier = rec.fetch(:description_id)
    self.text = rec.fetch(:description_text,'')
    self.metum = rec.fetch(:metum)
    self.status = APPROVED
    self.author = rec.fetch(:author_name)
    self.license = rec.fetch(:license)
    self.content_type = rec.fetch(:content_type,TEXT_CONTENT_TYPE)
    self.language = rec.fetch(:description_locale,'en')
    self.content_uri = rec.fetch(:content_uri,'')
    self.links = []

    if content_type == 'text/plain'
      self.content_uri = "#{identifier}.#{language}.txt"
    end
  end

  def attributes
    { text: text,
      metum: metum,
      status: status,
      author: author,
      license: license,
      content_type: content_type,
      language: language,
      content_uri: content_uri }
  end

  def uri
    BASE_URI.join('representations',identifier)
  end

  def link(identifier,verb,resource)
    links << Predicate.new(identifier,self,verb,resource)
  end
end

def import
  json = DATA_PATH.read
  data = JSON.parse(json,symbolize_names: true)

  data.fetch(:RECORDS).map do |rec|
    url = rec.delete(:old_page_urls).to_s
    url.gsub!(/[{}]/,'')
    rec.merge!({
      source_uri: url,
      title: rec.delete(:image_title)
    })
  end
end

def materialize(records)
  resources = {}

  records.each do |record|
    id = record.fetch(:image_id)
    resource = (resources[id] ||= Resource.new(record))
    representation = Representation.new(record)
    resource << representation
    resources
  end

  resources.values
end

@counter = 1 # HACK

def link(subject,predicate,object)
  forward = predicate.first
  reverse = predicate.last

  subject.link(@counter,forward,object)
  @counter += 1
  object.link(@counter,reverse,subject)
  @counter += 1
end

def make_api_obj(resource)
  resource_links = {
    self: BASE_URI.join("#{resource.identifier}.json")
  }

  relationships = { 
    hasFormat: {
      links: {
        self: BASE_URI.join(resource.identifier,'relationships','hasFormat'),
        related: BASE_URI.join(resource.identifier,'hasFormat'),
      },
      data: resource.representations.map { |r| { id: r.identifier, type: 'Representation' } }
    }
  }

  resource.links.group_by(&:verb).each do |verb,predicates|
    relationships[verb] = {
      links: BASE_URI.join(resource.identifier,'relationships',verb),
      related: BASE_URI.join(resource.identifier,verb),
      data: predicates.map { |p| { id: p.object.identifier, type: p.object.type } }
    }
  end

  included = []

  resource.representations.each do |r|
    included << {
      type: 'Representation',
      id: r.identifier,
      attributes: r.attributes,
      links: {
        self: r.uri
      }
    }
  end

  resource.links.each do |p|
    included << {
      type: p.object.type,
      id: p.object.identifier,
      attributes: p.object.attributes,
      links: {
        self: p.object.uri
      }
    }
  end

  data = {
    type: resource.type,
    id: resource.identifier,
    attributes: resource.attributes,
    links: resource_links,
    relationships: relationships
  }

  { data: [data],
    included: included }
end

def write_json(resources)
  resources.each do |resource|
    api_obj = make_api_obj(resource)

    path = OUTPUT_PATH.join("#{resource.identifier}.json")

    path.open('w') do |io|
      io << JSON.pretty_generate(api_obj)
    end
  end
end

picture_of_empire_state_building = Resource.new({
  title: 'Picture of Empire State Building',
  identifier: 'brs_0330',
  source_uri: 'http://www.esbnyc.com/sites/default/files/styles/module_image__600x338_/public/default_images/brs_0330.jpg?itok=PrpAgC4u',
  canonical_id: 'PrpAgC4u',
  context: 'Website',
  created_at: Date.today.to_s,
  updated_at: Date.today.to_s
})

picture_of_empire_state_building.representations << Representation.new({
  description_id: '1',
  description_locale: 'en',
  description_text: 'A tall building with upper floors lit up against a dusk background. The sky is deep blue, but the horizon is still dark orange, as though the sun had just set.',
  metum: 'Alt',
  author_name: 'Mike Subelsky',
  license: 'cc0-1.0'
})

empire_state_building = Resource.new({
  title: 'Empire State Building',
  type: 'PhysicalObject',
  identifier: 'www.esbnyc.com',
  source_uri: 'http://www.esbnyc.com/',
  canonical_id: 'http://www.esbnyc.com/',
  context: 'Place',
  created_at: Date.today.to_s,
  updated_at: Date.today.to_s
})

empire_state_building.representations << Representation.new({
  description_id: '2',
  description_locale: 'en',
  description_text: 'A large columnar building with many windows. The uppermost floors are narrower columns stacked on top of each other, in a tapering effect. The entire edifice is topped by a needle-like structure that projects into the air about 25% of the building height.',
  metum: 'Alt',
  author_name: 'Mike Subelsky',
  license: 'cc0-1.0'
})

link(picture_of_empire_state_building,HAS_PART,empire_state_building)

def translate(resources)
  translate = Google::Cloud::Translate.new(project: ENV.fetch('GOOGLE_TRANSLATE_PROJECT_NAME'))

  resources.each do |resource|
    LANGUAGES.each do |code|
      new_representations = resource.representations.map do |english|
        translation = translate.translate english.text, to: code

        new_representation = Representation.new({
          description_id: (english.identifier.to_i * 10).to_s,
          description_locale: code,
          description_text: translation.text,
          metum: english.metum,
          author_name: english.author,
          license: english.license,
          text: translation.text
        })

        puts code
        puts translation.text
        puts

        link(new_representation,IS_VERSION,english)

        new_representation
      end

      resource.representations.concat(new_representations.flatten)
    end
  end
end

def transcribe(resources)
  resources.each do |resource|
    new_reps = resource.representations.map do |r|
      audio_file_name = "#{r.identifier}.#{r.language}.aiff"

      if r.text != ''
        txt_path = OUTPUT_PATH.join(r.content_uri)
        txt_path.write(r.text)
      end

      voice = VOICES.fetch(r.language)
      command = "say -o #{OUTPUT_PATH.join(audio_file_name)} -v #{voice} '#{r.text}'"

      `#{command}`

      audio_rep = Representation.new({
        description_id: (r.identifier.to_i * 100).to_s,
        description_locale: r.language,
        content_type: 'audio/aiff',
        metum: r.metum,
        author_name: r.author,
        license: r.license,
        content_uri: audio_file_name
      })

      link(audio_rep,IS_FORMAT,r)

      audio_rep
    end

    resource.representations.concat(new_reps)
  end
end

records = import().last(10)
resources = materialize(records)

resources << empire_state_building
resources << picture_of_empire_state_building

translate(resources)
transcribe(resources)

write_json(resources)

resources.each do |r| 
  puts "https://coyote-team.github.io/spike/#{r.identifier}.json" 

  r.representations.each do |p| 
    puts "\thttps://coyote-team.github.io/spike/#{p.content_uri}"
  end

  puts
end
